SNAPSHOT v0.9.11 — Castra (VM orchestration harness)

Edits since v0.9.10
- Thread 20: Resolved defect T20-1 by introducing an injectable BrokerLauncher in castra-core; removed reliance on current_exe() for broker launch in the library path. CLI continues to launch via ProcessBrokerLauncher using its own executable, preserving deterministic behavior.
- Verification evidence: castra-core/src/core/runtime.rs now defines BrokerLauncher/Handle and ProcessBrokerLauncher; start_broker() accepts a launcher and tests assert the supplied launcher is used (no implicit re-exec).

Active threads (intent + acceptance deltas)
- Thread 2 — Cooperative shutdown lifecycle: unchanged.

- Thread 12 — Post-boot bootstrap pipeline: unchanged.

- Thread 13 — Stateless runs (ephemeral-only): unchanged.

- Thread 20 — UI ↔ Core integration (Composable first):
  Intent: Connect castra-ui to castra-core via the JSON event stream and ensure castra-core remains a fully embeddable library.
  Acceptance (partially satisfied):
  - Event Contract v1 is documented and versioned. [OPEN]
  - castra-core exposes a public library surface to run operations and emit events to an external subscriber. [DONE]
  - Broker (and any helper) launch is injectable/configurable; no use of std::env::current_exe() that binds to the embedding process. Default path remains deterministic for CLI usage. [DONE]
  - UI can initiate Up and render live per-VM progress without spawning additional UI/CLI windows. [NEXT]
  Verification updates: Library callers use operations::up_with_launcher with a custom launcher; tests in runtime.rs confirm injected launcher usage. UI should either inject ProcessBrokerLauncher::from_env (via CASTRA_CLI_EXECUTABLE) or a custom no-op for demos.
  Anchors: CORE.md; castra-core/src/core/runtime.rs; castra-core/src/app/up.rs; castra-core/src/core/events.rs; castra-ui/src/controller/*; castra-ui/src/components/*.

- Thread 21 — Operational clarity (Attention model): unchanged.

- Thread 22 — UI onboarding docs (tutorial set): unchanged.

Current code state (observable surfaces)
- Core emits structured JSON events; operations::up_with_launcher accepts an external BrokerLauncher; CLI path uses ProcessBrokerLauncher with its own executable; env-based launcher available for embedders (CASTRA_CLI_EXECUTABLE).
- UI skeleton present; vertical slice no longer blocked by broker coupling; remaining blocker is Event Contract v1 docs/tests and UI wiring to operations::up_with_launcher.

Narrative themes
1) Robust lifecycle; 10) Trustworthy bootstrap; 12) Day‑1 productivity; 13) Ephemeral-only policy; 20) Composability-first UI integration (broker abstraction landed); 21) Operational clarity; 22) Onboarding via tutorials.

Direction of travel
- Finalize Event Contract v1 docs/tests; wire castra-ui to use the contract and call core via operations::up_with_launcher with an injected launcher. Deliver the Up vertical slice with live status and no duplicate windows.

Cross-links
- runtime.rs tests (start_broker_uses_supplied_launcher) back the T20 resolution. CLI-specific current_exe() is confined to app/up.rs; library usage remains decoupled.

Editorial housekeeping
- Cleaned duplicate TODOs; converged on single sources for UI integration, vertical slice, and core composability.
