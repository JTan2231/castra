SNAPSHOT v0.8.6 — Castra (VM orchestration harness)

Edits since last snapshot refresh
- Thread 2 progressed from "planned" to "sequencing shipped": runtime now emits CooperativeAttempted(method, timeout_ms) followed by CooperativeSucceeded/CooperativeTimedOut before TERM/KILL; unavailable channels report timeout_ms=0 with reason=ChannelUnavailable and detail; channel errors surface as ChannelError.
- Thread 12 strengthened: override precedence (per‑VM over global) enforced with tests; idempotence NoOp path validated; Disabled mode yields Skipped outcome; Always runs despite stamps and logs durably.
- Canonical TODOs updated to reflect the above; next slices narrowed to configurability/docs (Thread 2) and stamp persistence/docs/smoke reruns (Thread 12).

Active threads (intent + acceptance)
- Thread 2 — Cooperative shutdown lifecycle (sequencing shipped): Before host termination, attempt guest‑cooperative shutdown with ordered, observable events and bounded waits.
  Progress:
  - Runtime emits CooperativeAttempted(method, timeout_ms) and CooperativeSucceeded/CooperativeTimedOut prior to TERM/KILL.
  - Unavailable channel path: CooperativeAttempted(method: Unavailable, timeout_ms=0) → CooperativeTimedOut(reason: ChannelUnavailable, detail) → escalate.
  - Available channel path (e.g., ACPI): success emits CooperativeSucceeded; timeout emits CooperativeTimedOut(reason: TimeoutExpired). Channel errors emit CooperativeTimedOut(reason: ChannelError) with diagnostics.
  - `down` continues concurrent per‑VM shutdown with live streaming; ShutdownComplete includes total_ms; tests cover stale/invalid QMP sockets, zero‑wait semantics, ordering, and propagated detail.
  Next slice:
  - Expose/propagate cooperative/TERM/KILL timeouts via CLI/options with clear defaults/help; render method + timeout/reason fields consistently in CLI/JSON and add brief remediation hints for ChannelUnavailable/ChannelError. Document example payloads and note 0ms unavailable path.
  Acceptance (per VM):
  - Event order: ShutdownRequested → CooperativeAttempted(method, timeout_ms) → CooperativeSucceeded | CooperativeTimedOut(timeout_ms, reason, detail?) → Escalation(SIGTERM)? → Escalation(SIGKILL)? → ShutdownComplete(outcome: Graceful|Forced, total_ms).
  - Timeouts configurable via CLI/opts; status/UI remain responsive; per‑VM isolation; idempotent; stable JSON fields.
  Anchors: src/core/runtime.rs; src/core/events.rs; src/core/options.rs; src/core/reporter.rs; src/app/down.rs.

- Thread 10 — Managed images: structured verification/profile events (shipped; docs/durability pending): Emit machine‑parseable events during verification/profile so downstream tools can rely on them.
  Shipped in v0.8.5:
  - New Event variants in src/core/events.rs: ManagedImageVerificationStarted/Result and ManagedImageProfileApplied/Result.
  - Support types: ManagedImageArtifactPlan, ManagedImageArtifactReport, ManagedImageChecksum; Profile components extended with steps[] in events.
  - Emission path in src/core/operations/mod.rs::up; app/up.rs renders durations, sizes, and steps.
  - CLEAN integrates reclaimed‑bytes evidence with latest ManagedImageVerificationResult per image and surfaces linkage (root disk path, bytes, verification delta) in CLI output.
  Outstanding:
  - Ensure reporter durability across sinks (unified stream + per‑image logs) with smoke tests; document field stability with example payloads (docs + CLEAN.md).
  Anchors: src/managed/mod.rs; src/core/events.rs; src/core/logs.rs; src/core/reporter.rs; src/core/operations/clean.rs; src/app/clean.rs; CLEAN.md.

- Thread 12 — Post‑boot bootstrap pipeline (partially implemented, behind flag): After first successful broker handshake for a VM, apply a host‑provided bootstrap (e.g., Nix flake) over SSH idempotently.
  Clarifications:
  - Triggered exactly once per VM per (base_image_hash, bootstrap_artifact_hash) change; handshake signal from status (reachable, last_handshake_age_ms) is the gate.
  - May consume ManagedImageVerificationResult (Thread 10) to validate inputs but must not block when absent.
  - Config knobs to disable or force ("always") bootstrap per‑VM or globally; defaults favor "once per stamp" with clear eventing.
  Progress:
  - Overrides shipped with precedence and conflict detection; docs/BOOTSTRAP.md documents invocation and precedence; unit tests cover parsing and precedence.
  - Idempotence validated: unchanged stamps emit BootstrapCompleted(status: NoOp) with no side effects; durable logs maintained.
  - Disabled mode yields Skipped outcome and an info diagnostic; Always mode runs despite stamps and emits Success with durable logs.
  - Handshake timeout failures are observable/durable: WaitHandshake step marked Failed, BootstrapFailed emitted, a single failed run log persisted with error detail. Polling uses sub‑second slices respecting deadlines. Runs execute per‑VM concurrently with live event streaming; outcomes returned in input order; first error captured without blocking others.
  Next slice:
  - Finalize stamp persistence under state root keyed by (base_image_hash, bootstrap_artifact_hash); smoke reruns on unchanged inputs; verify Disabled vs Always precedence across multiple VMs; confirm outcomes/order; enrich docs with payload/log examples.
  Acceptance:
  - Triggered exactly once per VM per image/content hash change; NoOp has no side effects; Disabled yields Skipped; Always forces Success execution despite stamps.
  - Events: BootstrapStarted / BootstrapCompleted(status: Success|NoOp|Skipped) / BootstrapFailed; durable step logs with durations; handshake failures surface as Failed step + BootstrapFailed with durable error log.
  - Overrides honored with precedence (per‑VM over global); conflicts rejected preflight; responsive status during long runs.
  Anchors: docs/BOOTSTRAP.md; src/core/status.rs (handshake fields); state‑root conventions.

Current code state (observable surfaces)
- CLI/library split via feature gating; default includes CLI; library builds with no‑default‑features.
- Status exposes broker reachability (reachable, last_handshake_age_ms) and bus health; designed to remain non‑blocking.
- Ports view with stable columns; Clean command with byte accounting/safeguards; links managed‑image evidence (root disk, bytes, verification delta) where available.
- Managed images emit structured verification/profile events with plans, reports, checksums, steps; app/up renders size/duration and steps; automation can consume JSON streams.
- Down command now emits cooperative shutdown events before escalation and renders per‑VM shutdown durations; performs parallel shutdown with live event streaming; forced shutdown returns success with warning.
- Bootstrap pipeline supports overrides (global and per‑VM) with precedence and conflict detection; surfaces handshake timeout failures with explicit events and durable run logs; executes per‑VM concurrently with live event streaming; outcomes returned in original order.

Narrative themes
1) Robust VM lifecycle — predictable, observable cooperative shutdown with bounded waits and clear outcomes.
10) Trustworthy bootstrap — verified managed images with structured events powering automation and cleanup.
12) Day‑1 productivity — idempotent, host‑driven post‑boot configuration triggered by real connectivity signals.

Direction of travel
- Thread 2: expose timeouts in CLI/options, render fields consistently, and document payloads; keep exit‑success semantics on forced shutdowns.
- Thread 10: add smoke tests across reporters and document stable fields with examples in docs and CLEAN.md.
- Thread 12: complete idempotence stamp persistence and NoOp flow; add smoke tests including override precedence with disable/force; keep docs current with payload/log examples.

Cross‑links
- CLEAN integrates with managed‑image events to present reclaimed‑bytes evidence via app surface; CLEAN.md documents the narrative.
- Lifecycle canonical TODO: todo_cooperative_shutdown_lifecycle.md.md (sequencing shipped; configurability/rendering/docs next).
- Thread 12 canonical TODO: todo_post_boot_bootstrap_pipeline.md.md (overrides/idempotence strengthened; stamp persistence/docs next).

Editorial housekeeping
- Canonical TODO files:
  - todo_cooperative_shutdown_lifecycle.md.md
  - todo_post_boot_bootstrap_pipeline.md.md
- Snapshot and TODOs reflect v0.8.6 progress; duplicates previously removed remain absent.