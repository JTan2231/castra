SNAPSHOT v0.8.6 — Castra (VM orchestration harness)

Edits since v0.8.5 refresh
- Thread 2 progress: `down` performs parallel per‑VM shutdown and streams events live, improving responsiveness and isolation. Runtime now emits CooperativeAttempted with timeout_ms=0 when the cooperative channel is unavailable (fixes misleading inherited waits). Added unix‑gated tests for QMP success/timeout paths and unavailable‑channel path (asserts ChannelUnavailable reason and ordered events). CLI now treats forced shutdowns as success (prints warning listing VMs) aligning with lifecycle acceptance. Remaining: full cooperative attempt/timeout/escalation sequencing in runtime for available channels.
- Thread 10 steady: Managed‑image evidence linkage in CLEAN is live and rendered (root disk path, bytes, verification delta). No new behavior changes; durability/docs remain outstanding.
- Thread 12 progress: Bootstrap pipeline runs per‑VM concurrently with live event streaming via a central channel while preserving per‑VM ordering. Handshake wait uses sub‑second slices honoring configured deadlines; on timeout we emit a failed WaitHandshake step and BootstrapFailed, and persist a failed run log with the timeout detail. Outcomes are returned in original VM order; first error captured without blocking others. New: per‑invocation CLI overrides for bootstrap mode (global and per‑VM) are implemented with conflict detection and precedence (per‑VM over global), and docs/BOOTSTRAP.md now documents invocation, event contract, and durable logs. Unit tests cover parsing and override application.
- Editorial housekeeping: De‑duplicated canonical TODOs previously; refreshed Thread 2 and Thread 12 TODOs to reflect shipped pieces and the next slice.

Active threads (intent + acceptance)
- Thread 2 — Cooperative shutdown lifecycle (partially implemented): Before host termination, attempt guest‑cooperative shutdown with ordered, observable events and bounded waits.
  Progress:
  - `down` runs VM shutdowns concurrently and streams events live.
  - total_ms added to ShutdownComplete and rendered in `down`.
  - Runtime fix: CooperativeAttempted reports timeout_ms=0 when cooperative method/channel is unavailable; CooperativeTimedOut includes reason=ChannelUnavailable in that path.
  - CLI treats forced shutdowns as overall success; forced set listed as warning.
  - Test coverage exists for QMP‑based cooperative sequences (success and timeout) and for unavailable channel semantics (ordered events, 0ms wait, escalation path).
  Next slice:
  - Emit CooperativeAttempted and CooperativeSucceeded/CooperativeTimedOut prior to TERM/KILL for available channels in the runtime, honoring configurable timeouts and preserving per‑VM isolation.
  Acceptance (per VM):
  - Event order: ShutdownRequested → CooperativeAttempted(method: ACPI|QMP|Agent, timeout_ms?) → CooperativeSucceeded | CooperativeTimedOut(timeout_ms, reason?) → Escalation(SIGTERM)? → Escalation(SIGKILL)? → ShutdownComplete(outcome: Graceful|Forced, total_ms).
  - Timeouts configurable via CLI/opts; status/UI remain responsive; per‑VM isolation maintained; idempotent behavior; stable JSON fields in logs/output.
  Anchors: src/core/runtime.rs; src/core/events.rs; src/core/options.rs; src/core/reporter.rs; src/app/down.rs.

- Thread 10 — Managed images: structured verification/profile events (shipped; docs/durability pending): Emit machine‑parseable events during verification/profile so downstream tools can rely on them.
  Shipped in v0.8.5:
  - New Event variants in src/core/events.rs: ManagedImageVerificationStarted/Result and ManagedImageProfileApplied/Result.
  - Support types: ManagedImageArtifactPlan, ManagedImageArtifactReport, ManagedImageChecksum; Profile components extended with steps[] in events.
  - Emission path in src/core/operations/mod.rs::up; app/up.rs renders durations, sizes, and steps.
  - CLEAN integrates reclaimed‑bytes evidence with latest ManagedImageVerificationResult per image and surfaces linkage (root disk path, bytes, verification delta) in CLI output.
  Outstanding:
  - Ensure reporter durability across sinks (unified stream + per‑image logs) with smoke tests; document field stability with example payloads (docs + CLEAN.md).
  Anchors: src/managed/mod.rs; src/core/events.rs; src/core/logs.rs; src/core/reporter.rs; src/core/operations/clean.rs; src/app/clean.rs; CLEAN.md.

- Thread 12 — Post‑boot bootstrap pipeline (partially implemented, behind flag): After first successful broker handshake for a VM, apply a host‑provided bootstrap (e.g., Nix flake) over SSH idempotently.
  Clarifications:
  - Triggered exactly once per VM per (base_image_hash, bootstrap_artifact_hash) change; handshake signal from status (reachable, last_handshake_age_ms) is the gate.
  - May consume ManagedImageVerificationResult (Thread 10) to validate inputs but must not block when absent.
  - Config knobs to disable or force ("always") bootstrap per‑VM or globally; safe defaults favor "once per stamp" with clear eventing.
  Progress:
  - Unix‑gated integration test exercises the pipeline end‑to‑end with stubbed ssh/scp/qemu, covering step events, stamps, durable logs, and NoOp replay.
  - Handshake timeout failures are observable and durable: WaitHandshake step marked Failed, BootstrapFailed emitted, and a single failed run log persisted with error detail.
  - Handshake polling uses sub‑second slices to respect configured deadlines; failure run logs are validated for content.
  - Runs execute per‑VM concurrently with live event streaming while preserving per‑VM ordering; outcomes returned in input order; first error captured without blocking others.
  - New: per‑invocation overrides shipped — `castra up --bootstrap <mode>` (global) and per‑VM forms (`--bootstrap <vm>=<mode>` / `vm:mode`), with conflict detection; per‑VM takes precedence over global. docs/BOOTSTRAP.md documents invocation, event contract, and durable logs. Unit tests cover parsing and precedence.
  Next slice:
  - Finalize idempotence stamps and NoOp path: persist stamps under state root keyed by (base_image_hash, bootstrap_artifact_hash); on unchanged inputs, emit BootstrapCompleted(status: NoOp) without side effects. Add smoke tests for reruns and for override interactions with disable/force knobs.
  Acceptance:
  - Triggered exactly once per VM per image/content hash change (idempotence stamps include base image hash + bootstrap artifact hash under state root).
  - Events: BootstrapStarted / BootstrapCompleted(status: Success|NoOp) / BootstrapFailed emitted via reporter; durable step logs with durations; handshake failures surface as Failed step + BootstrapFailed with durable error log.
  - Config knobs to disable or force ("always") bootstrap per‑VM or globally; safe defaults; responsive status during long runs; overrides honored with clear precedence (per‑VM over global; conflicts rejected with preflight error).
  - Safe re‑runs: when inputs unchanged, emits NoOp without side effects.
  Anchors: docs/BOOTSTRAP.md; src/core/status.rs (handshake fields); state‑root conventions.

Current code state (observable surfaces)
- CLI/library split via feature gating; default includes CLI; library builds with no‑default‑features.
- Status exposes broker reachability (reachable, last_handshake_age_ms) and bus health; designed to remain non‑blocking.
- Ports view with stable columns; Clean command with byte accounting/safeguards; now links managed‑image evidence (root disk, bytes, verification delta) where available.
- Managed images emit structured verification/profile events with plans, reports, checksums, steps; app/up renders size/duration and steps; automation can consume JSON streams.
- Down command renders per‑VM shutdown durations and performs parallel shutdown with live event streaming; forced shutdown returns success with warning.
- Bootstrap pipeline surfaces handshake timeout failures with explicit events and durable run logs; executes per‑VM concurrently with live event streaming; outcomes returned in original order. CLI supports per‑invocation bootstrap overrides (global and per‑VM) with precedence and conflict detection; docs cover invocation and event/log contract.

Narrative themes
1) Robust VM lifecycle — predictable, observable cooperative shutdown with bounded waits and clear outcomes.
10) Trustworthy bootstrap — verified managed images with structured events powering automation and cleanup.
12) Day‑1 productivity — idempotent, host‑driven post‑boot configuration triggered by real connectivity signals.

Direction of travel
- Implement cooperative shutdown events/behavior (Thread 2) honoring lifecycle waits and emitting ordered events; expand fields where already shipping (timeout_ms=0 on unavailable path, reason when timed out). Maintain exit‑success semantics on forced shutdowns.
- For Thread 10, add smoke tests across reporters and document stable fields with examples in docs and CLEAN.md.
- For Thread 12, complete idempotence stamps and NoOp flow; add smoke tests including override precedence with disable/force; keep docs current.

Cross‑links
- CLEAN integrates with managed‑image events to present reclaimed‑bytes evidence via app surface; CLEAN.md documents the narrative.
- Lifecycle canonical TODO: cooperative_shutdown_lifecycle.md.md (notes concurrency/live streaming progress, event fields, forced‑success exit, and next slice).
- Thread 12 canonical TODO captures CLI overrides, concurrency/live events, handshake‑failure behavior, and next implementation slice (idempotence stamps + NoOp).

Editorial housekeeping
- Canonical TODO files:
  - todo_cooperative_shutdown_lifecycle.md.md
  - todo_post_boot_bootstrap_pipeline.md.md
