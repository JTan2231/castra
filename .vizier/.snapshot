SNAPSHOT v0.8.0 — Castra (VM orchestration harness)

Edits since last snapshot
- Pruned delivered or docs/tests-only threads to focus on core future gaps.
- Consolidated narrative onto three forward-looking arcs: cooperative shutdown lifecycle, managed-image structured events, and post‑boot bootstrap.
- Removed ancillary follow-ups (help text, examples, smoke tests) now considered non-blocking polish.

Active threads (intent + acceptance)
- Thread 2 — Cooperative shutdown lifecycle (not yet implemented): Before host termination, attempt guest‑cooperative shutdown with ordered, observable events and bounded waits. Acceptance:
  - Events emitted in order per VM: ShutdownRequested → GuestCooperativeAttempted → GuestCooperativeConfirmed | GuestCooperativeTimeout → HostTerminate → HostKill (optional, only if still running) → ShutdownComplete.
  - Timeouts configurable via CLI/opts; status remains responsive during waits.
  - Logs/events are machine-parseable and appear in per-VM logs; exit codes reflect success vs forced kill.
  Anchors: src/core/runtime.rs; src/core/events.rs; src/core/options.rs; src/app/down.rs.

- Thread 10 — Managed images: structured verification/profile Events (partially shipped; events missing): Emit machine-parseable events during verification/profile so downstream tools (clean, bootstrap) can rely on them. Acceptance:
  - For each managed image operation, emit VerificationStarted/VerificationResult (checksums, sizes, durations) and ProfileApplied/ProfileResult with success/failure details.
  - CLEAN consumes these to account reclaimed bytes and show before/after evidence in output.
  - Docs may follow later; focus is on event shape stability and presence in logs/reporting APIs.
  Anchors: src/managed/mod.rs; src/core/logs.rs; src/core/reporter.rs; src/core/operations/clean.rs.

- Thread 12 — Post‑boot bootstrap pipeline (not yet implemented): After first successful broker handshake for a VM, apply a host‑provided bootstrap (e.g., Nix flake) over SSH in an idempotent manner. Acceptance:
  - Triggered exactly once per VM per image/content hash (idempotence via hash stamps under state root).
  - Observable, durable logs of each step (connect, transfer, apply, verify) with a final Bootstrap{Started,Completed,Failed} event set.
  - Safe to re-run with no changes when inputs unchanged; surfaces dependency on Thread 10 events when verifying base state.
  Anchors: docs/BOOTSTRAP.md; src/core/status.rs (handshake fields); state-root conventions.

Current code state (observable surfaces)
- CLI and library build split via feature gating; default includes CLI, no-default-features builds the library.
- Status exposes broker reachability fields (reachable, last_handshake_age_ms) and bus health, designed to remain non-blocking under load.
- Ports active view shipped with stable columns; Clean command shipped with byte accounting and safeguards; Managed images support profile+checksum verification.
- These shipped surfaces are stable; remaining work focuses on lifecycle events, image events, and post‑boot automation.

Narrative themes
1) Robust VM lifecycle — predictable, observable cooperative shutdown with bounded waits and clear outcomes.
10) Trustworthy bootstrap — verified managed images with structured events powering automation and cleanup.
12) Day‑1 productivity — idempotent, host‑driven post‑boot configuration triggered by real connectivity signals.

Direction of travel
- Implement cooperative shutdown events/behavior (Thread 2) honoring lifecycle waits and emitting ordered events.
- Add structured managed‑image verification/profile events and wire them into reporting/clean (Thread 10).
- Build the post‑boot bootstrap pipeline keyed to handshake and guarded by idempotence stamps (Thread 12).

Cross‑links
- BOOTSTRAP.md will define inputs/outputs for Thread 12 and reference managed‑image events (Thread 10).
- CLEAN integrates with managed‑image events to present reclaimed‑bytes evidence.
