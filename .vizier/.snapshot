SNAPSHOT v0.8.9 — Castra (VM orchestration harness)

Edits since last snapshot refresh
- Policy shift: Removed all bootstrap stamp persistence. The post‑boot bootstrap pipeline no longer reads or writes host‑side stamps, and idempotence is delegated to the bootstrap runner itself. Updated TODOs and narrative to reflect stamp‑free behavior. Thread 13 text adjusted to reference durable logs/events only.

Active threads (intent + acceptance)
- Thread 2 — Cooperative shutdown lifecycle (sequencing shipped): Before host termination, attempt guest‑cooperative shutdown with ordered, observable events and bounded waits.
  Progress:
  - Runtime emits CooperativeAttempted(method, timeout_ms) and CooperativeSucceeded/CooperativeTimedOut prior to TERM/KILL.
  - Unavailable channel path: CooperativeAttempted(method: Unavailable, timeout_ms=0) → CooperativeTimedOut(reason: ChannelUnavailable, detail) → escalate.
  - Available channel path (e.g., ACPI): success emits CooperativeSucceeded; timeout emits CooperativeTimedOut(reason: TimeoutExpired). Channel errors emit CooperativeTimedOut(reason: ChannelError) with diagnostics.
  - `down` continues concurrent per‑VM shutdown with live streaming; ShutdownComplete includes total_ms; tests cover stale/invalid QMP sockets, zero‑wait semantics, ordering, and propagated detail.
  Next slice:
  - Expose/propagate cooperative/TERM/KILL timeouts via CLI/options with clear defaults/help; render method + timeout/reason fields consistently in CLI/JSON and add brief remediation hints for ChannelUnavailable/ChannelError. Document example payloads and note 0ms unavailable path.
  Acceptance (per VM):
  - Event order: ShutdownRequested → CooperativeAttempted(method, timeout_ms) → CooperativeSucceeded | CooperativeTimedOut(timeout_ms, reason, detail?) → Escalation(SIGTERM)? → Escalation(SIGKILL)? → ShutdownComplete(outcome: Graceful|Forced, total_ms).
  - Timeouts configurable via CLI/opts; status/UI remain responsive; per‑VM isolation; idempotent; stable JSON fields.
  Anchors: src/core/runtime.rs; src/core/events.rs; src/core/options.rs; src/core/reporter.rs; src/app/down.rs.

- Thread 10 — Managed images: structured verification/profile events (shipped; docs/durability pending): Emit machine‑parseable events during verification/profile so downstream tools can rely on them.
  Shipped in v0.8.5:
  - New Event variants in src/core/events.rs: ManagedImageVerificationStarted/Result and ManagedImageProfileApplied/Result.
  - Support types: ManagedImageArtifactPlan, ManagedImageArtifactReport, ManagedImageChecksum; Profile components extended with steps[] in events.
  - Emission path in src/core/operations/mod.rs::up; app/up.rs renders durations, sizes, and steps.
  - CLEAN integrates reclaimed‑bytes evidence with latest ManagedImageVerificationResult per image and surfaces linkage (root disk path, bytes, verification delta) in CLI output.
  Outstanding:
  - Ensure reporter durability across sinks (unified stream + per‑image logs) with smoke tests; document field stability with example payloads (docs + CLEAN.md).
  Anchors: src/managed/mod.rs; src/core/events.rs; src/core/logs.rs; src/core/reporter.rs; src/core/operations/clean.rs; src/app/clean.rs; CLEAN.md.

- Thread 12 — Post‑boot bootstrap pipeline (partially implemented, behind flag): After first successful broker handshake for a VM, attempt a host‑provided bootstrap (e.g., Nix flake) over SSH idempotently — without any host‑side stamp persistence.
  Clarifications:
  - Triggering: On first confirmed broker handshake for a VM within the run, bootstrap is attempted based on CLI mode. Castra does not persist stamps; idempotence/no‑op decisions are up to the runner.
  - Config knobs: `--bootstrap=auto|always|skip` with per‑VM overrides; defaults favor auto.
  - May consume ManagedImageVerificationResult (Thread 10) to validate inputs but must not block when absent.
  Progress:
  - Overrides shipped with precedence and conflict detection; docs/BOOTSTRAP.md documents invocation and precedence; unit tests cover parsing and precedence.
  - Outcome handling: Disabled mode yields Skipped with diagnostic. Runner‑reported NoOp is surfaced if available. Handshake timeout failures are observable/durable: WaitHandshake step marked Failed, BootstrapFailed emitted, a single failed run log persisted with error detail. Polling uses sub‑second slices respecting deadlines. Runs execute per‑VM concurrently with live event streaming; outcomes returned in input order; first error captured without blocking others.
  Next slice:
  - Finalize removal of any stamp references in code/docs/tests; ensure no state‑root paths for stamps are touched. Smoke reruns on unchanged inputs should still attempt bootstrap; if runner reports NoOp, surface it; otherwise Success/Failed as appropriate.
  - UX polish: keep simplified flags; add `--plan` dry‑run that reports intent without stamp rationales; render compact TTY progress and one‑line outcomes; surface actionable hints on failure with pointers to durable logs; update help text and add Quick Start + Troubleshooting to BOOTSTRAP.md. JSON schema remains unchanged.
  Acceptance:
  - No host‑side stamp reads/writes. Repeated `up` invocations in auto/always attempt bootstrap again without consulting persistence.
  - Overrides honored with precedence (per‑VM over global); conflicts rejected preflight; responsive status during long runs.
  - UX: `--plan` produces deterministic summary without side effects; TTY progress and final summaries appear only in non‑JSON mode; failures show concise hint + log path; help/docs include examples and troubleshooting.
  Anchors: docs/BOOTSTRAP.md; src/core/status.rs (handshake fields); src/core/reporter.rs; src/app/up.rs; src/cli.rs; src/app/error.rs.

- Thread 13 — Stateless runs (ephemeral VM write layer + cleanup): Ensure all disk changes inside a VM vanish once it stops, independent of any bootstrap decision persistence.
  Intent:
  - Default VM launches use a non‑persistent write layer over managed base images; guest mutations are discarded on shutdown (graceful or forced).
  - Deterministic teardown removes ephemeral layers and per‑VM temp dirs immediately post‑exit; bounded orphan cleanup on next command after crashes/reboots.
  - CLEAN reports reclaimed bytes from ephemeral layers; output provides brief TTY notice after cleanup. Provide opt‑in persistent mode with prominent warnings.
  Acceptance:
  - Restarting a VM from the same base yields a pristine filesystem matching the base; host‑side durable artifacts are limited to logs/events (no stamps).
  - No residual ephemeral artifacts remain after normal shutdown; orphaned layers are detected and reclaimed opportunistically without blocking healthy ops.
  - CLI/opts expose ephemeral (default) vs persistent; persistent mode is clearly indicated in output and logs.
  Anchors: src/core/operations/up.rs; src/app/up.rs; src/core/operations/clean.rs; src/app/clean.rs; src/core/runtime.rs; src/app/down.rs; docs/BOOTSTRAP.md; CLEAN.md; CLI help.

Current code state (observable surfaces)
- CLI/library split via feature gating; default includes CLI; library builds with no‑default‑features.
- Status exposes broker reachability (reachable, last_handshake_age_ms) and bus health; designed to remain non‑blocking.
- Ports view with stable columns; Clean command with byte accounting/safeguards; links managed‑image evidence (root disk, bytes, verification delta) where available.
- Managed images emit structured verification/profile events with plans, reports, checksums, steps; app/up.rs renders size/duration and steps; automation can consume JSON streams.
- Down command emits cooperative shutdown events before escalation and renders per‑VM shutdown durations; performs parallel shutdown with live event streaming; forced shutdown returns success with warning.
- Bootstrap pipeline supports overrides (global and per‑VM) with precedence and conflict detection; surfaces handshake timeout failures with explicit events and durable run logs; executes per‑VM concurrently with live event streaming; outcomes returned in original order. No stamp persistence.
- Stateless runs (Thread 13) not yet implemented; defaults will favor ephemeral layers with host‑durable logs/events only.

Narrative themes
1) Robust VM lifecycle — predictable, observable cooperative shutdown with bounded waits and clear outcomes.
10) Trustworthy bootstrap — verified managed images with structured events powering automation and cleanup; idempotence comes from the runner, not host stamps.
12) Day‑1 productivity — host‑driven post‑boot configuration triggered by real connectivity signals, with improved usability and discoverability.
13) Stateless runs by default — ephemeral guests with durable host evidence (logs/events), enabling clean, reproducible sessions without stamp state.

Direction of travel
- Thread 2: expose timeouts in CLI/options, render fields consistently, and document payloads; keep exit‑success semantics on forced shutdowns.
- Thread 10: add smoke tests across reporters and document stable fields with examples in docs and CLEAN.md.
- Thread 12: purge stamp code/docs/tests; ensure reruns behave as stamp‑free; deliver UX polish (simplified flags, plan mode, TTY progress, actionable hints, docs) without altering JSON schema.
- Thread 13: implement ephemeral write layer default with deterministic cleanup; add CLI/opts for persistence; integrate reclaimed‑bytes reporting into CLEAN; show TTY notices; ensure crash/reboot orphan reclamation.

Cross‑links
- CLEAN integrates with managed‑image events to present reclaimed‑bytes evidence via app surface; extend to ephemeral layer reclamation (Thread 13).
- Lifecycle canonical TODO: todo_cooperative_shutdown_lifecycle.md (sequencing shipped; configurability/rendering/docs next).
- Thread 12 canonical TODO: todo_post_boot_bootstrap_pipeline.md (stamp‑free pipeline + UX polish).
- Thread 13 canonical TODO: todo_ephemeral_vm_storage_and_cleanup.md (stateless runs + cleanup + CLEAN integration; no stamp artifacts).

Editorial housekeeping
- Canonical TODO files remain:
  - todo_cooperative_shutdown_lifecycle.md
  - todo_post_boot_bootstrap_pipeline.md
  - todo_ephemeral_vm_storage_and_cleanup.md
- Snapshot bumped to v0.8.9 for stamp‑free bootstrap policy.
