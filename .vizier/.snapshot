SNAPSHOT v0.9.10 — Castra (VM orchestration harness)

Edits since v0.9.9
- Strengthened Thread 20 acceptance to require a broker launch abstraction; eliminated reliance on current_exe() for embedding scenarios per CORE.md evidence.
- Recorded a blocking defect: core re-executes the embedding binary (castra-ui) with `broker`, spawning a duplicate UI window. This must be resolved before the UI vertical slice proceeds.

Active threads (intent + acceptance deltas)
- Thread 2 — Cooperative shutdown lifecycle: unchanged.

- Thread 12 — Post-boot bootstrap pipeline: unchanged.

- Thread 13 — Stateless runs (ephemeral-only): unchanged.

- Thread 20 — UI ↔ Core integration (Composable first):
  Intent: Connect castra-ui to castra-core via the JSON event stream and ensure castra-core remains a fully embeddable library.
  Acceptance (updated):
  - Event Contract v1 is documented and versioned.
  - castra-core exposes a public library surface to run operations and emit events to an external subscriber.
  - Broker (and any helper) launch is injectable/configurable; no use of std::env::current_exe() that binds to the embedding process. Default path remains deterministic for CLI usage.
  - UI can initiate Up and render live per-VM progress without spawning additional UI/CLI windows.
  Verification additions: demo must show no second `castra-ui` process during Up; example proves library Up with a no-op broker runner.
  Anchors: CORE.md; castra-core/src/core/runtime.rs; castra-core/src/core/broker.rs; castra-core/src/core/operations/bus.rs; castra-core/src/core/events.rs; castra-ui/src/controller/*; castra-ui/src/components/*.

- Thread 21 — Operational clarity (Attention model): unchanged.

- Thread 22 — UI onboarding docs (tutorial set): unchanged.

Current code state (observable surfaces)
- Core emits structured JSON events; CLI/library split exists, but broker launch currently assumes current_exe() equals CLI, which breaks embedding (spawns a second castra-ui window per CORE.md).
- UI skeleton present; vertical slice blocked on broker decoupling.

Narrative themes
1) Robust lifecycle; 10) Trustworthy bootstrap; 12) Day‑1 productivity; 13) Ephemeral-only policy; 20) Composability-first UI integration (now with explicit broker abstraction); 21) Operational clarity; 22) Onboarding via tutorials.

Direction of travel
- Thread 20: implement broker launch abstraction, audit other subprocess spawns, publish Event Contract v1, then deliver UI Up vertical slice using process-boundary JSON.
- Threads 21/22: proceed after T20 unblock.

Cross-links
- CORE.md documents the defect motivating T20 acceptance changes; tests and examples under T20 will assert no duplicate UI processes during Up.

Editorial housekeeping
- Snapshot incremented to reflect composability defect and the required abstraction for broker/helpers.